version: '3'

services:

  ### NGINX Server #########################################
  nginx:
    container_name: nginx
    hostname: nginx
    build:
      context: ./nginx
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}:rw
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/conf.d
    environment:
      - TZ=${TZ}
    ports:
      - "80:80"
      - "8000-8010:8000-8010"
    restart: always
    networks:
      - workdock

  ### MySQL ################################################
  mysql:
    container_name: mysql
    image: mysql:${MYSQL_VERSION}
    hostname: mysql
    cap_add:
      - SYS_NICE
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${TZ}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ./mysql/conf.d:/etc/mysql/conf.d
    ports:
      - "${MYSQL_PORT}:3306"
    healthcheck:
      test: "/usr/bin/mysql --user=root --password=${MYSQL_ROOT_PASSWORD} --execute \"SHOW DATABASES;\""
      interval: 3s
      timeout: 1s
      retries: 5
    restart: always
    networks:
      - workdock

  ### MySQL-5.7 ################################################
  mysql-5.7:
    container_name: mysql-5.7
    image: mysql:5.7
    hostname: mysql-5.7
    cap_add:
      - SYS_NICE
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${TZ}
    volumes:
      - ${DATA_PATH_HOST}/mysql-5.7:/var/lib/mysql
      - ./mysql-5.7/conf.d:/etc/mysql/conf.d
    ports:
      - "3307:3306"
    healthcheck:
      test: "/usr/bin/mysql --user=root --password=${MYSQL_ROOT_PASSWORD} --execute \"SHOW DATABASES;\""
      interval: 3s
      timeout: 1s
      retries: 5
    restart: always
    networks:
      - workdock

  ### PostgreSQL ###########################################
  postgresql:
    build:
      context: ./postgresql
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - workdock

  ### Redis ################################################
  redis:
    container_name: redis
    image: redis:latest
    hostname: redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}",  "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    restart: always
    networks:
      - workdock

  ### node ##############################################
  node:
    container_name: node
    hostname: node
    build:
      context: ./node
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
    tty: true
    restart: always
    ports:
      - "3000:3000"
    networks:
      - workdock

  ### DEFAULT PHP-7.4 ##############################################
  php:
    container_name: php
    hostname: php
    build:
      context: ./php
    volumes:
      - ./php/conf/php-ini/php7.4.ini:/usr/local/etc/php/php.ini
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
    restart: always
    networks:
      - workdock

  ### PHP-7.3 demo ##############################################
  php-7.3:
    container_name: php-7.3
    hostname: php-7.3
    build:
      context: ./php
      dockerfile: Dockerfile-multi
      args:
        - PHP_VERSION=7.3
    volumes:
      - ./php/conf/php7.3.ini:/usr/local/etc/php/php.ini
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
    restart: always
    networks:
      - workdock

networks:
  workdock: